import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import numpy as np
import seaborn as sns
from sklearn.metrics import classification_report

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()
train_images, test_images = train_images / 255.0, test_images / 255.0  


class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']
plt.figure(figsize=(10, 10))
for i in range(10):
    plt.subplot(5, 5, i + 1)
    plt.xticks([]), plt.yticks([])
    plt.imshow(train_images[i])
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()


model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

print("Model Architecture:")
model.summary()


model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
history = model.fit(train_images, train_labels, epochs=1, validation_data=(test_images, test_labels))


plt.matshow(test_images[666])

Predictions = model.predict(test_images, batch_size = 128) 

np.argmax(Predictions[666])

import numpy as np

import seaborn as sns

y_Prediction_labels = [np.argmax(i) for i in Predictions]
y_Prediction_labels[:5]

cm = tf.math.confusion_matrix(test_labels, y_Prediction_labels)
plt.figure(figsize = (10, 7))
sns.heatmap(cm, annot=True, fmt='d')

model_eval = model.evaluate(test_images, test_labels)
print("Accuracy of model is:", model_eval[1], "%")